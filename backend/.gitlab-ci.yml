variables:
  SONAR_TOKEN: $SONAR_PROJECT_LOGIN_BACK
  VERSION: 1.0.${CI_PIPELINE_ID}

include:
  - template: Security/SAST.gitlab-ci.yml

stages:
  - build
  - test
  - release
  - deploy
  - notify

build:
  stage: build
  cache:
    - key:
        files:
          - backend/pom.xml
      paths:
        - ${CI_PROJECT_DIR}/.m2/repository
  script:
    - cd backend
    - mvn package -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository
  before_script:
    - export BUILD_CI_JOB_ID=$CI_JOB_ID
  artifacts:
    paths:
      - backend/target/sausage-store-0.0.1-SNAPSHOT.jar

sonarqube-backend-sast:
  stage: test
  needs:
    - build
  image: maven:3.8-openjdk-16
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - cd backend
    - mvn verify sonar:sonar
      -Dsonar.qualitygate.wait=true
      -Dsonar.projectName="25_ИГОРЬТЮТЮНОВ_БЭКЭНД"
      -Dsonar.projectKey=$SONAR_PROJECT_KEY_BACK \

spotbugs-sast:
  stage: test
  needs:
    - build
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 11
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository

release:
  stage: release
  needs:
    - build
  script:
    - cd backend
    - >
      mvn deploy -DskipTests 
      -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository 
      -s settings.xml 
      -Dversion.application=${VERSION}
      

deploy:
  stage: deploy
  needs:
    - release
    - test
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - chmod 400 "$SSH_PRIVATE_KEY"
    - ssh-add "$SSH_PRIVATE_KEY"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $ENV_HOST > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp ./backend/sausage-store-backend.service $ENV_USER@$ENV_HOST:/home/$ENV_USER/sausage-store-backend.service
    - > 
      ssh $ENV_USER@$ENV_HOST
      "export "CURRENT_VERSION=${VERSION}"; 
      export "VERSION=${VERSION}";
      export "NEXUS_REPO_URL=${NEXUS_REPO_URL}"; 
      export "NEXUS_REPO_BACKEND_NAME=${NEXUS_REPO_BACKEND_NAME}"; 
      export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; 
      export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}";
      /bin/bash -s " < ./backend/deploy.sh

notify:
  stage: deploy
  needs:
    - build
  rules:
    - if: $CI_COMMIT_TITLE =~ /send notification/
  script:
    - |
      curl --location "https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage" \
      --header "Content-Type: application/json" \
      --data "{\"chat_id\": \"-1002007326342\",\"text\": \"Выполнен deploy backend-а. URL для скачивания 
      артефактов
      $CI_PROJECT_URL/-/jobs/$BUILD_CI_JOB_ID/artifacts/download\"}"
