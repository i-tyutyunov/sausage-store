variables:
  SONAR_TOKEN: $SONAR_PROJECT_LOGIN_FRONT
  VERSION: 1.0.${CI_PIPELINE_ID}
  SAST_EXCLUDED_ANALYZERS: "semgrep-sast"

include:
  - template: Security/SAST.gitlab-ci.yml

stages:
  - build
  - test
  - release
  - deploy
  - notify

build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/frontend"
      --dockerfile "${CI_PROJECT_DIR}/frontend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/sausage-frontend:$CI_COMMIT_SHA"
      --build-arg VERSION=$VERSION
      --cache=true


sonarqube-frontend-sast:
  stage: test
  needs:
    - build
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - cd frontend
    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.projectKey=$SONAR_PROJECT_KEY_FRONT \


release:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  stage: release
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA latest

deploy:
  stage: deploy
  needs:
   - release
  environment:
    name: frontend
    url: https://std-025-84.praktikum-services.tech
  rules:
    - when: manual
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - chmod 400 "$SSH_PRIVATE_KEY"
    - ssh-add "$SSH_PRIVATE_KEY"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan std-025-84.praktikum-services.tech > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - command -v envsubst >/dev/null || ( apt-get update -y && apt-get install gettext-base -y )
  script:
    - ssh $ENV_USER@$ENV_HOST "mkdir -p /tmp/${CI_PROJECT_DIR}/frontend/"
    - scp ./frontend/default.conf $ENV_USER@$ENV_HOST:/tmp/${CI_PROJECT_DIR}/frontend/default.conf
    - envsubst < ./frontend/deploy.sh
    - envsubst < ./frontend/deploy.sh | ssh $ENV_USER@$ENV_HOST /bin/bash -s


notify:
  stage: notify
  needs: [build, deploy]
  rules:
    - if: $CI_COMMIT_TITLE =~ /send notification/
  script:
    - |
      curl --location "https://api.telegram.org/$TG_USER:$TG_PASSWORD/sendMessage" \
      --header "Content-Type: application/json" \
      --data "{\"chat_id\": \"-1002007326342\",\"text\": \"Выполнен deploy frontend-а. URL для скачивания артефактов
      $CI_PROJECT_URL/-/jobs/$BUILD_CI_JOB_ID/artifacts/download\"}"