variables:
  SONAR_TOKEN: $SONAR_PROJECT_LOGIN_FRONT
  VERSION: 1.0.${CI_PIPELINE_ID}

include:
  - template: Security/SAST.gitlab-ci.yml

stages:
  - build
  - test
  - release
  - deploy
  - notify

build:
  stage: build
  cache:
    - key:
        files:
          - frontend/package.json
      paths:
        - ${CI_PROJECT_DIR}/frontend/node_modules
  script:
    - cd frontend
    - npm install
    - npm run build
  before_script:
    - export BUILD_CI_JOB_ID=$CI_JOB_ID
  artifacts:
    paths:
      - frontend/dist/frontend


sonarqube-frontend-sast:
  stage: test
  needs:
    - build
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - cd frontend
    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.projectKey=$SONAR_PROJECT_KEY_FRONT \


release:
  stage: release
  needs:
    - build
  script:
    - cd frontend/dist
    - tar czvf sausage-store-${VERSION}.tar.gz frontend
    - >
      curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" 
      -T sausage-store-${VERSION}.tar.gz ${NEXUS_REPO_URL}/repository/${NEXUS_REPO_FRONTEND_NAME}/${VERSION}/

deploy:
  stage: deploy
  needs:
   - release
  environment:
    name: frontend
    url: https://std-025-84.praktikum-services.tech
  rules:
    - when: manual
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - chmod 400 "$SSH_PRIVATE_KEY"
    - ssh-add "$SSH_PRIVATE_KEY"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan std-025-84.praktikum-services.tech > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh $ENV_USER@$ENV_HOST
      "export "VERSION=${VERSION}";
      export "NEXUS_REPO_URL=${NEXUS_REPO_URL}";
      export "NEXUS_REPO_FRONTEND_NAME=${NEXUS_REPO_FRONTEND_NAME}";
      export "NEXUS_REPO_USER=${NEXUS_REPO_USER}";
      export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}";
      /bin/bash -s " < ./frontend/deploy.sh


notify:
  stage: notify
  needs: [build, deploy]
  rules:
    - if: $CI_COMMIT_TITLE =~ /send notification/
  script:
    - |
      curl --location "https://api.telegram.org/$TG_USER:$TG_PASSWORD/sendMessage" \
      --header "Content-Type: application/json" \
      --data "{\"chat_id\": \"-1002007326342\",\"text\": \"Выполнен deploy frontend-а. URL для скачивания артефактов
      $CI_PROJECT_URL/-/jobs/$BUILD_CI_JOB_ID/artifacts/download\"}"